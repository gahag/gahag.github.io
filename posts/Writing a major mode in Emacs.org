#+title: Writing a major mode in Emacs
#+date: <2021-04-07 Wed>
#+filetags: emacs major mode major-mode
#+setupfile: ../org-templates/post.org

Following my previous post on [[https://gahag.github.io/Custom%20syntax%20highlighter%20for%20LaTeX.html][how to create a custom syntax highlighter for LaTeX]], the
necessity of editing Hush[fn:hush] source files arose. But, as Hush is a brand new
language, there are no editors that support it yet. Then, how can we implement support for
Hush in a text editor? Let's reach for Emacs[fn:emacs], the extensible, customizable,
free/libre text editor.

Emacs has this thing called major modes[fn:major-modes], which are the modules that
implement support for viewing and editing different types of data, including source code
text. Major modes, as other kinds of extensions, are programmed using Emacs Lisp. As I'm
not very familiar with Emacs Lisp, my first goal was to define basic syntax highlighting
for Hush. I managed to do so using ~define-generic-mode~, a built-in facility to implement a
major mode:

#+begin_src elisp
  (define-generic-mode 'hush-mode
    ;; Comments:
    '("#")

    ;; Keywords:
    '("let" "if" "then" "else" "end" "for" "in" "do" "while"
      "function" "return" "not" "and" "or" "true" "false" "nil" "break" "self")

    ;; Additional definitions:
    '()

    ;; File extension:
    '("\\.hsh$")

    ;; Additional setup:
    nil

    ;; Descritption:
    "A mode for hush scripts")
#+end_src

This way, we can define comment syntax, keywords, and file extensions for our language. We
also get string highlighting out of the box. But editing source code goes beyond just
basic syntax highlighting. With =define-generic-mode=, we're lacking:
- Automatic indentation support.
- Interactive features, such as executing the current file.
- A custom keymap, which is a set of shortcuts specific to our mode.
- Hooks[fn:hooks], a feature in Emacs that allows one to attach custom functions to
  specific events, like saving the file.

To provide proper support for such features, we must go beyond =define-generic-mode=. We'll
reach for a more powerful construct, =define-derived-mode=, which allows us to build a major
mode based on another major mode. In particular, one usually would want to derive from
=prog-mode=, which is a generic mode for programming languages. As Hush is largely based on
Lua[fn:lua], we will derive from =lua-mode=[fn:lua-mode] instead, which will provide some
features like automatic indentation out of the box.

In order to override the aspects that differ between Lua and Hush, we must understand a
few things first:
1. Emacs' font-lock is based on regexes[fn:regex], which we will use for keywords.
2. Additionally, we can use syntax tables[fn:syntax-tables], which contain definitions to
   syntactic constructs. We will use one to define comments and operators.

By exploring these concepts, and using =lua-mode='s implementation as inspiration, we can
finally implement =hush-mode=:

#+begin_src elisp
  ;; A list of keywords in Hush:
  (defvar hush-keywords
    '("let" "if" "then" "else" "end" "for" "in" "do" "while" "function"
      "return" "not" "and" "or" "true" "false" "nil" "break" "self"))


  ;; The syntax table for comments and operators:
  (defvar hush-mode-syntax-table
    (with-syntax-table (copy-syntax-table)
      ;; According to the modify-syntax-entry documentation, the string
      ;; parameter is a char code:
      ;; .  punctuation
      ;; "  string quote
      ;; <  comment starter
      ;; >  comment ender

      ;; comment syntax: begins with "#", ends with "\n"
      (modify-syntax-entry ?# "<")
      (modify-syntax-entry ?\n ">")

      ;; main string syntax: bounded by ' or "
      (modify-syntax-entry ?\' "\"")
      (modify-syntax-entry ?\" "\"")

      ;; single-character binary operators:
      (modify-syntax-entry ?+ ".")
      (modify-syntax-entry ?- ".")
      (modify-syntax-entry ?* ".")
      (modify-syntax-entry ?/ ".")
      (modify-syntax-entry ?% ".")
      (modify-syntax-entry ?> ".")
      (modify-syntax-entry ?< ".")
      (modify-syntax-entry ?= ".")
      (modify-syntax-entry ?! ".")

      (syntax-table))
    "`hush-mode' syntax table.")

  ;; Setup the keywords regex from the keywords list:
  (defvar hush-font-lock-keywords
    (concat "\\<\\(" (regexp-opt hush-keywords) "\\)\\>" ))

  ;; Define the font-lock properties:
  (defvar hush-font-lock
    `(
      (,hush-font-lock-keywords . font-lock-keyword-face)
      ;; Here, we can place additional definitions.
      ))

  ;; A function to setup the font-lock properties:
  (defun hush-font-lock-setup ()
    "Set up Hush font lock."
    (setq-local font-lock-defaults '((hush-font-lock) nil t)))

  ;; Create a new mode map for Hush, where we can override shortcuts
  ;; from lua-mode:
  (defvar hush-mode-map (make-sparse-keymap)
    "The keymap for Hush scripts")
  ;; Here, we can define shortcuts (This is just a dummy example)
  (define-key hush-mode-map (kbd "C-c t") 'find-file)

  ;; Define our major mode, based on lua-mode:
  (define-derived-mode hush-mode lua-mode "hush" ()
    :syntax-table hush-mode-syntax-table
    (setq-local comment-use-syntax t
                ; These will be used when inserting comments, but not
                ; for highlighting:
                comment-start "# "
                comment-start-skip "##*[ \t]*")
    (hush-font-lock-setup))

  ;; Define the file extension for Hush scripts:
  (add-to-list 'auto-mode-alist '("\\.hsh\\'" . hush-mode))
#+end_src



[fn:hush] https://github.com/gahag/hush
[fn:emacs] https://www.gnu.org/software/emacs/
[fn:major-modes] https://www.gnu.org/software/emacs/manual/html_node/emacs/Modes.html
[fn:hooks] https://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html
[fn:lua] http://www.lua.org/
[fn:lua-mode] https://immerrr.github.io/lua-mode/
[fn:regex] https://en.wikipedia.org/wiki/Regular_expression
[fn:syntax-tables] https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Basics.html
