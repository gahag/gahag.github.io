#+title: Custom syntax highlighter for LaTeX
#+date: <2021-04-02 Fri>
#+filetags: latex code syntax-highlight minted pygments org-mode
#+setupfile: ../org-templates/post.org


LaTeX has great syntax highlight support for code with the Minted[fn:minted]
package. Minted uses Pygments[fn:pygments] as tokenizer, and it supports a long list of
programming languages[fn:pygments-langs]. But what if we want to use a programming
language that is not supported by Pygments, perhaps one that we're designing?

In this post, I'll show how to make a custom lexer for Pygments, which will allow syntax
highlighting through Minted. In particular, this should also work out of the box with
anything that produces LaTeX, including Emacs' Org-mode[fn:org-mode].

# #+attr_html: :width 200px

Let's create a custom lexer for Hush[fn:hush], a programming language that I'm working
on. First, let's create the following directory structure for our custom lexer:
#+begin_example
.
├── lexer
│   ├── hush.py
│   └── __init__.py
└── setup.py
#+end_example

- The =hush.py= file will contain our lexer implementation.
- The =__init__.py= file may be left empty.
- The =setup.py= file will contain the setup for our package, including integration with
  the system Pygments installation.

Pygments implements lexing based on regular expressions. Therefore, we must construct our
custom lexer by using regular expressions for each kind of token, and connect those using
Pygments' facilities.

In the =hush.py= file, we define our implementation (you may want to replace /hush/ with your
language name):
#+begin_src python
  from pygments.lexer import RegexLexer, include, default, combined
  from pygments.token import Text, Comment, Operator, Keyword, Name, \
    String, Number, Punctuation


  class HushLexer(RegexLexer):
    """
    For Hush scripts.
    """

    name = 'Hush'
    aliases = ['hush']
    filenames = ['*.hsh']
    mimetypes = ['text/x-hush', 'application/x-hush']

    # Here are the syntax definitions for our language:
    tokens = {
      'root': [
        # Hush allows a file to start with a shebang.
        (r'#!.*', Comment.Preproc),
        default('base'),
      ],
      'ws': [ # Whitespace
        (r'(?:#.*$)', Comment.Single), # Comments start with '#'.
        (r'(?:\s+)', Text),
      ],
      'base': [
        include('ws'),

         # Hex numbers:
        (r'(?i)0x[\da-f]*(\.[\da-f]*)?(p[+-]?\d+)?', Number.Hex),
        # Floats, including exponent notation:
        (r'(?i)(\d*\.\d+|\d+\.\d*)(e[+-]?\d+)?', Number.Float),
        (r'(?i)\d+e[+-]?\d+', Number.Float),
        # Integers:
        (r'\d+', Number.Integer),

        (r'[\?\$!=<>{}|+\-*/%]+', Operator), # List of operators.
        (r'[\[\]().,:;]|@\[', Punctuation),  # Other punctuation.
        (r'(and|or|not)\b', Operator.Word),  # Non-symbol operators.

        # Keywords:
        (r'(if|then|else|end|for|in|return)\b', Keyword.Reserved),
        # Some keyword classes can be used:
        (r'(let)\b', Keyword.Declaration),
        (r'(true|false|nil)\b', Keyword.Constant),
        # Here, we indicate that the 'funcname' rule should be used
        # whenever the 'function' keyword is found:
        (r'(function)\b', Keyword.Reserved, 'funcname'),

        # Identifiers:
        (r'[A-Za-z_]\w*(\.[A-Za-z_]\w*)?', Name),

        # Strings:
        ('"', String.Double, combined('stringescape', 'string'))
      ],

      'funcname': [ # Function names.
        include('ws'),
        (r'(?:[^\W\d]\w*)', Name.Function, '#pop'),
        # inline function
        (r'\(', Punctuation, '#pop'),
      ],

      'stringescape': [ # Escaped characters inside strings.
        (
          r'\\([abfnrtv\\"\']'
          r'|[\r\n]{1,2}'
          r'|z\s*'
          r'|x[0-9a-fA-F]{2}'
          r'|\d{1,3}'
          r'|u\{[0-9a-fA-F]+\})',
          String.Escape
        ),
      ],

      'string': [ # Strings.
        (r'"', String.Double, '#pop'),
        (r'[^\\"]+', String.Double),
      ]
    }

    # We can override this function to manually parse subexpressions. In
    # this case, we're splitting dotted names, so that the dot itself
    # won't be highlighted as a name.
    def get_tokens_unprocessed(self, text):
      for index, token, value in RegexLexer.get_tokens_unprocessed(self, text):
        if token is Name and '.' in value:
          a, b = value.split('.')
          yield index, Name, a
          yield index + len(a), Punctuation, '.'
          yield index + len(a) + 1, Name, b
          continue
        yield index, token, value
#+end_src

Insert the following contents for =setup.py= (you may want to replace /hush/ with your
language name):
#+begin_src python
  from setuptools import setup, find_packages

  setup(
    name='hushlexer',
    packages=find_packages(),
    entry_points =
    '''
    [pygments.lexers]
    hushlexer = lexer.hush:HushLexer
    ''',
  )
#+end_src

Finally, from the project root, run the installation command:
#+begin_src bash
  $ python setup.py install --user
#+end_src

Pygments should then recognize your lexer automatically. Therefore, source code blocks
using pygments should work out of the box. Here's an example of how it looks like for
Hush:

[[../images/posts/Custom syntax highlighter for LaTeX/hush-syntax-highlight.png]]

[fn:minted] https://www.overleaf.com/learn/latex/Code_Highlighting_with_minted
[fn:pygments] https://pygments.org/
[fn:pygments-langs] https://pygments.org/languages/
[fn:org-mode] https://orgmode.org/
[fn:hush] https://github.com/gahag/hush
